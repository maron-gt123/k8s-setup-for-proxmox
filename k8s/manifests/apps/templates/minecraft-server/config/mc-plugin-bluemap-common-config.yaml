apiVersion: v1
kind: ConfigMap
metadata:
  name: mc-plugin-bluemap-common-config
data:
  bluemap-core.conf: |
    ##                          ##
    ##         BlueMap          ##
    ##       Core-Config        ##
    ##                          ##
    
    # By changing the setting (accept-download) below to TRUE you are indicating that you have accepted mojang's EULA (https://account.mojang.com/documents/minecraft_eula),
    # you confirm that you own a license to Minecraft (Java Edition)
    # and you agree that BlueMap will download and use a minecraft-client file (depending on the minecraft-version) from mojangs servers (https://piston-meta.mojang.com/) for you.
    # This file contains resources that belong to mojang and you must not redistribute it or do anything else that is not compliant with mojang's EULA.
    # BlueMap uses resources in this file to generate the 3D-Models used for the map and texture them. (BlueMap will not work without those resources.)
    accept-download: true
    
    # The folder where bluemap saves data-files it needs during runtime or to save e.g. the render-progress to resume it later.
    # Default is "bluemap"
    data: "bluemap"
    
    # This changes the amount of threads that BlueMap will use to render the maps.
    # A higher value can improve render-speed but could impact performance on the host machine.
    # This should be always below or equal to the number of available processor-cores.
    # Zero or a negative value means the amount of available processor-cores subtracted by the value.
    # (So a value of -2 with 6 cores results in 4 render-processes)
    # Default is 1
    render-thread-count: 2
    
    # Controls whether BlueMap should try to find and load mod-resources and datapacks from the server/world-directories.
    # Default is true
    scan-for-mod-resources: false
    
    # If this is true, BlueMap might send really basic metrics reports containing only the implementation-type and the version that is being used to https://metrics.bluecolored.de/bluemap/
    # This allows me to track the basic usage of BlueMap and helps me stay motivated to further develop this tool! Please leave it on :)
    # An example report looks like this: {"implementation":"bukkit","version":"5.12","mcVersion":"?"}
    # Default is true
    metrics: true
    
    # Config-section for debug-logging
    log: {
      # The file where the debug-log will be written to.
      # Comment out to disable debug-logging completely.
      # Java String formatting syntax can be used to add time, see: https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html
      # Default is no logging
      file: "bluemap/logs/debug.log"
    
      # Whether the logger should append to an existing file, or overwrite it
      # Default is false
      append: false
    }
    
  
  
  bluemap-sql.conf: |
    ##                          ##
    ##         BlueMap          ##
    ##      Storage-Config      ##
    ##                          ##
    
    # The storage-type of this storage.
    # Depending on this setting, different config-entries are allowed/expected in this config file.
    # Don't change this value! (If you want a different storage-type, check out the other example-configs)
    storage-type: sql
    
    # The JDBC-Connection URL that is used to connect to the database.
    # The format for this url is usually something like: jdbc:[driver]://[host]:[port]/[database]
    # The exact format of the url is determined by the JDBC-Driver you are using.
    connection-url: "jdbc:mariadb://${CFG_SQLSERVER_ADDRESS}:3306/${CFG_SQLSERVER_BLUEMAP_DATABASE}"
    
    # You can set any additional (JDBC-Driver-specific) properties here
    # Usually that's your db-user and password
    connection-properties: {
        user: "${CFG_SQLSERVER_USERNAME}",
        password: "${CFG_SQLSERVER_PASSWORD}"
    }
    
    # The maximum number of connections to the database that are allowed to be open at the same time.
    # A negative number means unlimited.
    # Default is: -1
    max-connections: -1
    
    # This can be used to load a custom jdbc-driver from a .jar file.
    # E.g. if your runtime-environment is not already providing the sql-driver you need,
    # you could download the MariaDB JDBC-Connector from https://mariadb.com/downloads/connectors/connectors-data-access/java8-connector/
    # place it in the './bluemap' folder and use is like this:
    driver-jar: "/data/plugins/BlueMap/bluemap/mariadb-java-client.jar"
    
    # This is the driver-class that bluemap will try to load and use.
    # Check the documentation of the driver you are using if you don't know this.
    # Leaving this commented means that bluemap automatically tries to find a suitable driver in your classpath.
    # (If you added a custom driverJar above, you HAVE TO set the correct class name here)
    driver-class: "org.mariadb.jdbc.Driver"
    
    # The compression-type that bluemap will use to compress generated map-data.
    # Available compression-types are:
    #  - gzip
    #  - zstd
    #  - deflate
    #  - none
    # The default is: gzip
    compression: gzip
  bluemap-plugin.conf: |
    ##                          ##
    ##         BlueMap          ##
    ##      Plugin-Config       ##
    ##                          ##
    
    # If the server should send player-positions to the webapp.
    # This only works if the integrated webserver is enabled.
    # Default is true
    live-player-markers: true
    
    # A list of gamemodes that will prevent a player from appearing on the map.
    # Possible values are: survival, creative, spectator, adventure
    hidden-game-modes: [
            "spectator"
    ]
    
    # If this is true, players that are vanished (by a plugin) will be hidden on the map.
    # (This only works with Spigot and Sponge based vanish-plugins)
    # Default is true
    hide-vanished: true
    
    # If this is true, players that have an invisibility (potion-)effect will be hidden on the map.
    # Default is true
    hide-invisible: true
    
    # If this is true, players that are sneaking will be hidden on the map.
    # Default is false
    hide-sneaking: false
    
    # Hides the player if they are in a sky or block-light level below the given number.
    # BOTH values have to be below the threshold for the player to be hidden!
    # E.g. if you set both to 1, then the player will be hidden on the map if they are in absolute darkness
    # Or, if you want players only be visible on the surface you set the sky-threshold to something between 1 and 15
    # and the block-threshold to 16
    # Default is 0 (don't hide the player)
    hide-below-sky-light: 0
    hide-below-block-light: 0
    
    # If this is true, players that are on a different world than the viewed map will not appear on the player-list.
    # Default is false
    hide-different-world: false
    
    # The interval in seconds that the markers will be written to the map-storage.
    # This is useful if you can't create a live-connection between the server and the webapp
    # and the markers can only be updated via the map-storage.
    # 0 or lower means that the markers will never be written to the map-storage.
    # Default is 0
    write-markers-interval: 10
    
    # The interval in seconds that the players will be written to the map-storage.
    # This is useful if you can't create a live-connection between the server and the webapp
    # and the players can only be updated via the map-storage.
    # 0 or lower means that the players will never be written to the map-storage.
    # Default is 0
    write-players-interval: 3
    
    # Download the skin from mojang-servers when a player joins your server, so it can be used for the player-markers.
    # Default is true
    skin-download: true
    
    # The amount of players that is needed to pause BlueMap's render-threads.
    # -> If this amount of players or more is online, bluemap will stop rendering map-updates until enough players
    #    have logged off again
    # Setting this to 0 or -1 will disable this feature -> bluemap will not pause rendering
    # Default is -1
    player-render-limit: -1
    
    # The interval in minutes in which a full map-update will be triggered.
    # This is ADDITIONALLY to the normal map-update process (in case that fails to detect any file-changes).
    # ! This DOESN'T re-render the entire map each time, it only checks if there are some changes that have not been rendered yet!
    # Default is 1440 (24 hours)
    full-update-interval: 1440
